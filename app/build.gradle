plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

/*
 * MIT License
 *
 * Copyright (c) 2020 Vivek Singh
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

//read credentials
def credentials = rootProject.file("local.properties")
def credentialProperty = new Properties()
credentialProperty.load(new FileInputStream(credentials))
def android_builder_version = "4.0.1"

ext {
    android_builder_main_version = Integer.parseInt(android_builder_version.split("\\.")[0])
    android_builder_mid_version = Integer.parseInt(android_builder_version.split("\\.")[1])
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    this.rootProject.buildscript.configurations.classpath
            .resolvedConfiguration
            .firstLevelModuleDependencies.
            each {
                def name = it.name
                if (name.contains('com.android.tools.build:gradle')) {
                    def moduleVersion = it.moduleVersion
                    if (moduleVersion.contains("-")) {
                        def versionArray = moduleVersion.split("-")
                        ext.android_builder_main_version = Integer.parseInt(versionArray[0])
                        ext.android_builder_mid_version = Integer.parseInt(versionArray[1])
                    } else {
                        version = moduleVersion
                        android_builder_version = moduleVersion
                        ext.android_builder_main_version = Integer.parseInt(android_builder_version.split("\\.")[0])
                        ext.android_builder_mid_version = Integer.parseInt(android_builder_version.split("\\.")[1])
                    }
                }
            }
    defaultConfig {
        applicationId "com.training.pagingcompose"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "BASE_URL", "\"https://api.themoviedb.org/\"")
        buildConfigField("String", "SMALL_IMAGE_URL", "\"https://image.tmdb.org/t/p/w200\"")
        buildConfigField("String", "LARGE_IMAGE_URL", "\"https://image.tmdb.org/t/p/w500\"")
        buildConfigField("String", "ORIGINAL_IMAGE_URL", "\"https://image.tmdb.org/t/p/original\"")
        buildConfigField("String", "TMDB_API_KEY", credentialProperty['TMDB_API_KEY'])
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    if (ext.android_builder_main_version >= 7 || (ext.android_builder_main_version > 4 && ext.android_builder_mid_version > 1)) {
        buildFeatures {
            compose true
        }
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion kotlin_version
    }
}

dependencies {
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'

    implementation 'com.google.android.material:material:1.2.1'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    //koin
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"

    if (android_builder_main_version < 7) {
        add("kotlinCompilerPluginClasspath", "androidx.compose.compiler:compiler:$compose_version")
    }
    // Compose
    implementation "androidx.appcompat:appcompat:$compose_appcompat_version"
    implementation "androidx.activity:activity-compose:$compose_activity_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"

    implementation "dev.chrisbanes.accompanist:accompanist-coil:$compose_utils_chrisbanes_coil"
    // Paging Compose
    implementation "androidx.paging:paging-compose:$paging_compose_version"
}